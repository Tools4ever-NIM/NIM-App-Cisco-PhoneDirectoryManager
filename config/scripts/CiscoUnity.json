{"name":"CiscoUnity","studio_file_name":"","typescript":"import { nim } from \"./nim\";\n\n// #region Configuration\n  const systemname_AD = \"AD\";\n  const systemname_CUCM = \"CiscoUCM\";\n  const systemname_Unity = \"CiscoUnity\";\n  const parkedmailbox_ExtensionUpper = 9000\n  const parkedmailbox_ExtensionLower = 9999\n// #endregion\n\n// #region Private Functions\n  /**\n   * Retrieves the current associated devices for the owner specified\n   * @param {string} OwnerId - The unique identifier of the owner whose devices are to be fetched.\n   * @returns List of associated devices\n   */\n  async function getOwnerAssociatedDevices(OwnerId: string) {\n    return await nim.filterExecute(\n      \"App_Cisco_Script_GetCUCMUserAssociatedDevices\",\n      { UserId: OwnerId }\n    );\n  }\n\n  /**\n   * Obtains a list of associated devices for the owner and removes them\n   * @param {string} OwnerId - The unique identifier of the owner whose devices are removed\n   */\n  async function removeOwnerDevices(OwnerId: string) {\n    const devices = await getOwnerAssociatedDevices(OwnerId);\n\n    if (devices && devices?.length > 0) {\n      nim.logInfo(\n        `Owner [${OwnerId}] has ${devices?.length} Devices`\n      );\n\n      // Loop over each Devices\n      for (const device of devices) {\n        nim.logInfo(`Device Name - [${device.name}]`);\n\n        // Skip Physical Phones\n        if (!device.name.startsWith(\"SEP\")) {\n          nim.logInfo(`Remove Device - [${device.name}]`);\n          //TODO: Target action remove device\n        } else {\n          nim.logInfo(`Skipping Device Removal - [${device.name}]`);\n        }\n      };\n    } else {\n      nim.logInfo(`No devices found for owner [${OwnerId}]`);\n    }\n  }\n  \n  /**\n   * Retrieves AD User Account for specified sAMAccountName\n   * @param {string} sAMAccountName - sAMAccountName of user to return\n   * @param {boolean} ignoreError - If True, ignore errors\n   * @returns AD User Account\n   */\n  async function getADUser(sAMAccountName: string, ignoreError?: boolean) {\n    const adUser = await nim.filterExecute(\"App_Cisco_Script_GetADUser\", {\n      sAMAccountName: sAMAccountName,\n    });\n    \n    if (adUser && adUser.length == 1) {\n      nim.logInfo(`Found AD user [${adUser[0].objectGUID}]`);\n      return adUser[0];\n    } else if (adUser && adUser.length > 1 && !ignoreError) {\n      nim.logError(`Found multiple accounts for [${sAMAccountName}]`);\n      throw new RangeError(`Found multiple accounts for [${sAMAccountName}]`);\n    }\n\n    if(!ignoreError) {\n      nim.logError(`Cannot find AD user for [${sAMAccountName}]`);\n      throw new ReferenceError(`Cannot find AD user for [${sAMAccountName}]`);\n    }\n\n    return null\n  }\n\n  /**\n   * Retrieves Building Details for specified Building ID\n   * @param {number} BuildingID - Building ID to retrieve\n   * @returns Building Details\n   */\n  async function getBuilding(BuildingID: number) {\n    const Building = await nim.filterExecute(\"App_Cisco_Script_GetBuilding\", {\n      BuildingID: BuildingID,\n    });\n    \n    if (Building && Building.length == 1) {\n      nim.logInfo(`Found Building [${Building[0].BuildingID}]`);\n      return Building[0];\n    } else if (Building && Building.length > 1) {\n      nim.logError(`Found multiple buildings for [${BuildingID}]`);\n      throw new RangeError(`Found multiple buildings for [${BuildingID}]`);\n    }\n\n    return null\n  }\n\n  /**\n   * Retrieves Phone Templates for specified Building ID\n   * @param {number} BuildingID - Building ID to retrieve\n   * @returns Phone Templates\n   */\n  async function getPhoneTemplates(BuildingID: number) {\n    const PhoneTemplates = await nim.filterExecute(\"App_Cisco_Script_GetPhoneTemplates\", {\n      BuildingID: BuildingID,\n    });\n    \n    if (PhoneTemplates && PhoneTemplates.length > 0) {\n      nim.logInfo(`Found Phone Templates for Building [${PhoneTemplates[0].BuildingID}]`);\n      return PhoneTemplates;\n    }\n\n    throw new Error(`Failed to retrieve Phone Templates for Building [${BuildingID}]`)\n  }\n\n  /**\n   * Retrieves Universal Device Template\n   * @param {string} UUID - Universal Device Template to retrieve\n   * @returns Universal Device Template details\n   */\n  async function getUniversalDeviceTemplate(UUID: string) {\n    const Templates = await nim.filterExecute(\"App_Cisco_Script_GetCUCMUniversalTemplate\", {\n      UUID: UUID,\n    });\n    \n    if (Templates && Templates.length == 1) {\n      nim.logInfo(`Found Universal Device Template [${Templates[0].uuid}]`);\n      return Templates[0];\n    } else if (Templates && Templates.length > 1) {\n      nim.logError(`Found multiple universal device templates for [${UUID}]`);\n      throw new RangeError(`Found multiple universal device templates for [${UUID}]`);\n    }\n\n    throw new Error(`Failed to retrieve universal device template for [${UUID}]`)\n  }\n\n  /**\n   * Retrieves Product\n   * @param {string} Enum - Product Enum to retrieve\n   * @returns Product details\n   */\n  async function getProduct(Enum: string) {\n    const Products = await nim.filterExecute(\"App_Cisco_Script_GetCUCMProduct\", {\n      Enum: Enum,\n    });\n    \n    if (Products && Products.length == 1) {\n      nim.logInfo(`Found Product [${Products[0].enum}]`);\n      return Products[0];\n    } else if (Products && Products.length > 1) {\n      nim.logError(`Found product for [${Enum}]`);\n      throw new RangeError(`Found products for [${Enum}]`);\n    }\n\n    throw new Error(`Failed to get products for [${Enum}]`)\n  }\n\n  /**\n     * Retrieves Unity User Account for specified alias\n     * @param {string} alias - Alisa used to search for user \n     * @param {boolean} ignoreError - If True, ignore errors\n     * @returns Unity User Account\n     */\n  async function getUnityUser(alias: string, ignoreError: boolean) {\n    let unityUser = await nim.filterExecute(\"App_Cisco_Script_GetUnityUser\", {\n      Alias: alias\n    });\n\n    if (unityUser && unityUser.length == 1) {\n      nim.logInfo(`Found Unity user [${unityUser[0].ObjectId}]`);\n      return unityUser[0];\n    } else if (unityUser && unityUser.length > 1 && !ignoreError) {\n      nim.logError(`Found multiple accounts for alias [${alias}]`);\n      throw new RangeError(`Found multiple accounts for extension [${alias}]`);\n    }\n\n    if(!ignoreError) {\n      nim.logError(`Cannot find Unity user for alias [${alias}]`);\n      throw new ReferenceError(`Cannot find Unity user for alias [${alias}]`);\n    }\n\n    return null\n  }\n\n  /**\n     * Retrieves Unity User Account for specified extension\n     * @param {string} Extension - Extension used to search for user \n     * @returns Unity User Account\n     */\n  async function getUnityUserByExtension(Extension: string) {\n    const unitUser = await nim.filterExecute(\"App_Cisco_Script_GetUnityUserByExtension\", {\n      DtmfAccessId: Extension\n    });\n\n    if (unitUser && unitUser.length == 1) {\n      nim.logInfo(`Found Unity user [${unitUser[0].ObjectId}]`);\n      return unitUser[0];\n    } else if (unitUser && unitUser.length > 1) {\n      nim.logError(`Found multiple accounts for extension [${Extension}]`);\n      throw new RangeError(`Found multiple accounts for extension [${Extension}]`);\n    }\n\n    nim.logError(`Cannot find Unity user for extension [${Extension}]`);\n    throw new ReferenceError(`Cannot find Unity user for extension [${Extension}]`);\n  }\n\n  /**\n     * Checks to see if extension is already being assigned\n     * @param {string} Extension - Extension used to search for user \n     * @returns {boolean} - True, if assigned\n     */\n  async function checkExtensionAssigned(Extension: string) {\n    const unitUser = await nim.filterExecute(\"App_Cisco_Script_GetUnityUserByExtension\", {\n      DtmfAccessId: Extension\n    });\n\n    return !!(unitUser && unitUser.length > 0)\n  }\n\n  /**\n   * Retrieves specified Phone Line\n   * @param {string} UUID - The unique identifier of phone line\n   * @returns Phone Line\n   */\n  async function getCUCMPhoneLine(UUID: string) {\n    const PhoneLine = await nim.filterExecute(\n      \"App_Cisco_Script_GetCUCMPhoneLine\",\n      { UUID: UUID }\n    );\n\n    if (PhoneLine && PhoneLine.length == 1) {\n      nim.logInfo(`Found CUCM Line [${PhoneLine[0].uuid}]`);\n      return PhoneLine[0];\n    } else if (PhoneLine && PhoneLine.length > 1) {\n      nim.logError(`Found multiple CUCM Lines for [${UUID}]`);\n      throw new RangeError(`Found multiple CUCM Phone Lines for [${UUID}]`);\n    }\n\n    nim.logError(`Cannot find CUCM Line for [${UUID}]`);\n    throw new ReferenceError(`Cannot find CUCM Line for [${UUID}]`);\n  }\n\n  /**\n   * Retrieves specified Phone \n   * @param {string} UUID - The unique identifier of phone\n   * @returns Phone\n   */\n  async function getCUCMPhone(UUID: string) {\n    const phone = await nim.filterExecute(\"App_Cisco_Script_GetCUCMPhone\", {\n      UUID: UUID,\n    });\n\n    if (phone && phone.length == 1) {\n      nim.logInfo(`Found CUCM Phone [${phone[0].uuid}]`);\n      return phone[0];\n    } else if (phone && phone.length > 1) {\n      nim.logError(`Found multiple CUCM Phone for [${UUID}]`);\n      throw new RangeError(`Found multiple CUCM Phone for [${UUID}]`);\n    }\n    nim.logError(`Cannot find CUCM Phone for [${UUID}]`);\n    throw new ReferenceError(`Cannot find CUCM Phone for [${UUID}]`);\n  }\n\n  /**\n * Generates a unique random number within a specified range that's not already in a given array.\n * \n * @param {number} upper - The upper bound of the random number range.\n * @param {number} lower - The lower bound of the random number range.\n * @param {string[]} existingArray - An array of numbers to check against for uniqueness.\n * @return {string} A unique random number not in the existing array.\n */\n  async function generateUniqueRandom(upper: number, lower: number, existingArray: string[]) {\n    let uniqueRandom;\n  \n    do {\n      // Generate a random number between lower and upper (inclusive) and then convert it to a string\n      uniqueRandom = Math.floor(Math.random() * (upper - lower + 1) + lower).toString();\n    } while (existingArray.includes(uniqueRandom)); // Check if the generated number as string is in the array\n    \n    return uniqueRandom; // Return the unique random number as a string\n  }\n\n  function deleteAfterFirstMatch(text: string, pattern: string): string {\n    const index = text.indexOf(pattern); // Find the index of the first occurrence of the pattern\n    if (index >= 0) {\n      // If the pattern is found, return the substring up to that index\n      return text.substring(0, index);\n    }\n    // If the pattern is not found, return the original string\n    return text;\n  }\n\n// #endregion\n\n// #region NIM Functions\n  /**\n     * Updates the Phone Line assignment for user, additionally removing the current owner\n     * @param {string} PhoneLineUUID - The unique identifier of phone line\n     * @param {string} PhoneUUID - The unique identifier of phone\n     * @param {number} BuildingID - BuildingID   \n     * @param {string} ExternalPhoneNumberMask - THe external phone number mask for building\n     * @param {string} CurrentUserId - Current owner username of the phone line\n     * @param {string} NewUserId - New owner username for the phone line\n     * @param {string} NewPhoneLabel - New phone label\n     * @param {string} NewPhoneName - New phone name\n     */\n  export async function UpdateLineAssignment(\n    PhoneLineUUID: string,\n    PhoneUUID: string,\n    BuildingID: number,\n    ExternalPhoneNumberMask: string,\n    ProvisionSoftPhone: boolean,\n    CurrentUserId: string,\n    NewUserId: string,\n    NewPhoneLabel: string,\n    NewPhoneName: string\n  ) {\n    // #region Validation of Resources\n      nim.logInfo(\"Validating resources prior to executing changes\");\n\n      // #region Retrieve Current Owner AD Account\n      nim.logInfo(\"Retrieving current AD user account\");\n      const currentOwnerADUser = await getADUser(CurrentUserId);\n      // #endregion\n\n      // #region Retrieve New Owner AD Account\n        nim.logInfo(\"Retrieving new owner AD user account\");\n        const newOwnerADUser = await getADUser(NewUserId);\n      // #endregion\n\n      // #region Retrieve CUCM Phone Line\n        nim.logInfo(\"Retrieving CUCM Phone Line\");\n        const cucmPhoneLine = await getCUCMPhoneLine(PhoneLineUUID);\n      // #endregion\n\n      // #region Retrieve CUCM Phone\n        nim.logInfo(\"Retrieving CUCM Phone\");\n        const cucmPhone = await getCUCMPhone(PhoneUUID);\n      // #endregion\n\n      // #region Retrieve Building\n        nim.logInfo(\"Retrieving Building\");\n        const Building = await getBuilding(BuildingID)\n      // #endregion\n\n      // #region Retrieve Phone Templates\n        nim.logInfo(\"Retrieving Phone Templates\")\n        const PhoneTemplates = await getPhoneTemplates(BuildingID)\n      // #endregion\n      \n      // #region Get Parked Mailboxes\n        const parkedMailboxes = await nim.filterExecute(\n          \"App_Cisco_Script_GetParkedMailboxes\"\n        );\n\n        const parkedExtensions = parkedMailboxes.map(obj => obj.UnityUserExtension)\n      // #endregion\n\n      nim.logInfo(\"Validation completed\")\n    // #endregion\n\n    // #region Previous Owner Devices\n      nim.logInfo(\"Check if previous owner has associated devices and remove them\");\n      await removeOwnerDevices(CurrentUserId);\n    // #endregion\n\n    // #region New Owner User Account\n      nim.logInfo(\"Check if new owner has CUCM User Account\");\n      const newOwnerCUCMUser = await nim.filterExecute(\n        \"App_Cisco_Script_GetCUCMUser\",\n        { UserId: NewUserId }\n      );\n\n      if (newOwnerCUCMUser && newOwnerCUCMUser?.length < 1) {\n        nim.logInfo(`New Owner doesn't exist in CUCM, creating user`);\n        // TODO: Target Action create CUCM user\n      } else {\n        nim.logInfo(`New Owner exists in CUCM, skipping creating user`);\n      }\n    // #endregion\n\n    // #region Update Directory Number Description\n      nim.logInfo(\"Updating Directory Number Description\");\n      nim.logInfo(\n        `UUID: [${PhoneLineUUID}] - newOwnerUsername: [${NewUserId}] - newAlertingName: [${NewPhoneName}]`\n      );\n      // TODO: Target Action\n\n    // #endregion\n\n    // #region Update Device-To-Line Description\n      nim.logInfo(\"Updating Device-To-Line Description\");\n      nim.logInfo(\n        `LineUUID: [${cucmPhoneLine.uuid}] - lineIndex: [${cucmPhoneLine.index}] - dirnPattern: [${cucmPhoneLine.dirn_pattern}] - dirnRoutePartitionName: [${cucmPhoneLine.dirn_routePartitionName}] - newDescription: [${NewPhoneLabel}] - newName: [${NewPhoneName}] - newExternalCallingMask: [${ExternalPhoneNumberMask}]`\n      );\n      // TODO: Target Action\n    // #endregion\n\n    // #region Update the Phone Owner\n    nim.logInfo(\"Updating Phone Owner\");\n    nim.logInfo(\n      `LineUUID: [${cucmPhoneLine.uuid}] - newOwnerUsername: [${NewUserId}]`\n    );\n    // TODO: Target Action\n    // #endregion\n\n    // #region New Owner Devices\n      nim.logInfo(\"Check if new owner has associated devices and remove\");\n      await removeOwnerDevices(NewUserId);\n    // #endregion\n\n    // #region Update Soft Phone for new user\n    if(ProvisionSoftPhone) {\n      nim.logInfo(\"Updating Soft Phone for new owner\");\n      \n      if(PhoneTemplates) {\n        for (const template of PhoneTemplates) {\n          nim.logInfo(`Processing Phone Template [${template.ID}]`);\n          let universalDeviceTemplate = await getUniversalDeviceTemplate(template.UniversalDeviceTemplateUuid);\n          let product = await getProduct(template.ProductEnum);\n\n          let phoneName = product.devicenameformat;\n          phoneName = deleteAfterFirstMatch(phoneName, \"[\");\n          phoneName = phoneName.replace('[', '');\n          phoneName = phoneName + newOwnerADUser?.sAMAccountName;\n          phoneName = phoneName.toUpperCase();\n          phoneName = phoneName.substring(0, 15);\n\n          nim.logInfo(`Phone Template [${template.ID}] - Phone Name [${phoneName}]`);\n\n          let phoneDescription = universalDeviceTemplate.deviceDescription;\n          phoneDescription = phoneDescription?.replace('#LN#', newOwnerADUser?.sn ?? '');\n          phoneDescription = phoneDescription?.replace('#FN#', newOwnerADUser?.givenName ?? '');\n          phoneDescription = phoneDescription?.replace('#ID#', newOwnerADUser?.sAMAccountName ?? '');\n          phoneDescription = phoneDescription?.replace('#NAME#', newOwnerADUser?.displayName ?? '');\n          phoneDescription = phoneDescription?.replace('#EMAIL#', newOwnerADUser?.mail ?? '');\n          phoneDescription = phoneDescription?.replace('#DEPT#', newOwnerADUser?.department ?? '');\n          phoneDescription = phoneDescription?.replace('#DIRN#', cucmPhoneLine.dirn_pattern);\n          phoneDescription = phoneDescription?.replace('#PRODUCT#', product.name);\n\n          nim.logInfo(`Phone Template [${template.ID}] - Phone Description [${phoneDescription}]`);\n          //TODO Target Action Add Phone\n          //TODO Target Action Update Phone Line\n          //TODO Target Action Update Phone Line User Association\n          //Should be added to tables but we may need to track this new device separately.\n        }\n      } else {\n        nim.logInfo(\"No phone templates to process\");\n      }\n    \n    } else {\n      nim.logInfo(\"Skipping Soft Phone for new owner\");\n    }\n    // TODO: If condition, Soft phones enabled?\n    // TODO: process room templates\n\n    // TODO: Target Action\n    // #endregion\n\n    // #region Update New Owner associated devices with all phone names\n      nim.logInfo(\"Update New Owner Associated devices phone names\");\n      const newOwnerDevices = await getOwnerAssociatedDevices(NewUserId);\n      for (const device of newOwnerDevices) {\n        nim.logInfo(`Set Name for Device [${device.name}]`);\n        // TODO: Target Action\n      };\n    // #endregion\n\n    // #region Update New Owner Primary Extension\n      nim.logInfo(\"Updating New Owner primary extension\");\n      nim.logInfo(\n        `newOwnerUsername: [${NewUserId}] - dirnPattern: [${cucmPhoneLine.dirn_pattern}] - dirnRoutePartitionName: [${cucmPhoneLine.dirn_routePartitionName}]`\n      );\n    // #endregion\n\n    // #region Update IPPhone for AD User\n      nim.logInfo(\n        `Updating [ipPhone] for New Owner to [${cucmPhoneLine.dirn_pattern}]`\n      );\n\n      // TODO: Update Target Action\n      // await nim.targetSystemFunctionRun(systemname_AD, 'UserUpdate',{ objectGUID: newOwnerADUser.objectGUID })\n    // #endregion\n\n    // #region Update telephoneNumber for AD User\n      nim.logInfo(\n        `Updating [telephoneNumber] for New Owner to [${cucmPhoneLine.dirn_pattern}]`\n      );\n\n      // TODO: Update Target Action\n      // await nim.targetSystemFunctionRun(systemname_AD, 'UserUpdate',{ objectGUID: newOwnerADUser.objectGUID })\n    // #endregion\n\n    // #region Reassign current extension owner, Update AD User\n      nim.logInfo(\"Checking target extension is taken in Unity\");\n      if(await checkExtensionAssigned(cucmPhoneLine.dirn_pattern)) {\n        let CurrentUnityUser = await getUnityUserByExtension(cucmPhoneLine.dirn_pattern)\n\n        if(CurrentUnityUser.Alias.toLowerCase() !== newOwnerADUser?.sAMAccountName.toLowerCase()) {\n          \n          //Get unique advailable parked extension\n          let uniqueParkedExtension = await generateUniqueRandom(parkedmailbox_ExtensionUpper, parkedmailbox_ExtensionLower, parkedExtensions)\n\n          // TODO: Target action write back parked mailbox to internal database\n          // TODO: Target action assign random extension to current user\n          \n          if(currentOwnerADUser && currentOwnerADUser.sAMAccountName.length > 0) {\n            nim.logInfo(\"Updating Current Owner AD User Account\")\n            nim.logInfo(`objectGUID: [${currentOwnerADUser.objectGUID}] - ipPhone: [${uniqueParkedExtension}] - telephoneNumber: [${uniqueParkedExtension}]`)\n            // TODO: Target action update ipPhone and telephone Number for current User\n          }\n        }\n      }\n    // #endregion\n\n    // #region Check New Owner in Unity\n    nim.logInfo(\"Checking if new owner has unity user account\")\n    let newOwnerUnityAccount = await getUnityUser(NewUserId,true)\n\n    if(newOwnerUnityAccount && newOwnerUnityAccount.ObjectId.length < 1) {\n      nim.logInfo(\"Creating Unity user account for new owner\") \n      // TODO Target action create unity account\n      // Create Unity User\n      // Add SMTP Address\n      // Add Unified Messaging\n    } else {\n      nim.logInfo(\"Updating Unity user account for new owner\")\n      // Update User Extension\n      // Add/Update SMTP Address\n      // Add/Update Unified Messaging\n\n    }\n    // #endregion\n\n    // #region Update New Owner Call Schedule\n      nim.logInfo(\"Updating Unity call schedule for new owner\")\n      // TODO: Target Action\n    // #endregion\n\n    // #region New Owner Transfer Rules\n      nim.logInfo(\"Checking if User Transfer Rules enabled for Building\")\n      if(Building?.UnityUserTransferRulesEnabled) {\n          nim.logInfo(\"Updating User Transfer Rules\")\n          //TODO Target Action Update Standard Transfer Rule\n          //TODO Target Action Update Closed Transfer Rule\n          //TODO Target Action Update Alternative Transfer Rule\n      }\n    // #endregion\n  }\n// #endregion\n","javascript":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateLineAssignment = void 0;\n/// <reference types=\"node\" />\n// #region Configuration\nconst systemname_AD = \"AD\";\nconst systemname_CUCM = \"CiscoUCM\";\nconst systemname_Unity = \"CiscoUnity\";\nconst parkedmailbox_ExtensionUpper = 9000;\nconst parkedmailbox_ExtensionLower = 9999;\n// #endregion\n// #region Private Functions\n/**\n * Retrieves the current associated devices for the owner specified\n * @param {string} OwnerId - The unique identifier of the owner whose devices are to be fetched.\n * @returns List of associated devices\n */\nfunction getOwnerAssociatedDevices(OwnerId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield nim.filterExecute(\"App_Cisco_Script_GetCUCMUserAssociatedDevices\", { UserId: OwnerId });\n    });\n}\n/**\n * Obtains a list of associated devices for the owner and removes them\n * @param {string} OwnerId - The unique identifier of the owner whose devices are removed\n */\nfunction removeOwnerDevices(OwnerId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const devices = yield getOwnerAssociatedDevices(OwnerId);\n        if (devices && (devices === null || devices === void 0 ? void 0 : devices.length) > 0) {\n            nim.logInfo(`Owner [${OwnerId}] has ${devices === null || devices === void 0 ? void 0 : devices.length} Devices`);\n            // Loop over each Devices\n            for (const device of devices) {\n                nim.logInfo(`Device Name - [${device.name}]`);\n                // Skip Physical Phones\n                if (!device.name.startsWith(\"SEP\")) {\n                    nim.logInfo(`Remove Device - [${device.name}]`);\n                    //TODO: Target action remove device\n                }\n                else {\n                    nim.logInfo(`Skipping Device Removal - [${device.name}]`);\n                }\n            }\n            ;\n        }\n        else {\n            nim.logInfo(`No devices found for owner [${OwnerId}]`);\n        }\n    });\n}\n/**\n * Retrieves AD User Account for specified sAMAccountName\n * @param {string} sAMAccountName - sAMAccountName of user to return\n * @param {boolean} ignoreError - If True, ignore errors\n * @returns AD User Account\n */\nfunction getADUser(sAMAccountName, ignoreError) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const adUser = yield nim.filterExecute(\"App_Cisco_Script_GetADUser\", {\n            sAMAccountName: sAMAccountName,\n        });\n        if (adUser && adUser.length == 1) {\n            nim.logInfo(`Found AD user [${adUser[0].objectGUID}]`);\n            return adUser[0];\n        }\n        else if (adUser && adUser.length > 1 && !ignoreError) {\n            nim.logError(`Found multiple accounts for [${sAMAccountName}]`);\n            throw new RangeError(`Found multiple accounts for [${sAMAccountName}]`);\n        }\n        if (!ignoreError) {\n            nim.logError(`Cannot find AD user for [${sAMAccountName}]`);\n            throw new ReferenceError(`Cannot find AD user for [${sAMAccountName}]`);\n        }\n        return null;\n    });\n}\n/**\n * Retrieves Building Details for specified Building ID\n * @param {number} BuildingID - Building ID to retrieve\n * @returns Building Details\n */\nfunction getBuilding(BuildingID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const Building = yield nim.filterExecute(\"App_Cisco_Script_GetBuilding\", {\n            BuildingID: BuildingID,\n        });\n        if (Building && Building.length == 1) {\n            nim.logInfo(`Found Building [${Building[0].BuildingID}]`);\n            return Building[0];\n        }\n        else if (Building && Building.length > 1) {\n            nim.logError(`Found multiple buildings for [${BuildingID}]`);\n            throw new RangeError(`Found multiple buildings for [${BuildingID}]`);\n        }\n        return null;\n    });\n}\n/**\n * Retrieves Phone Templates for specified Building ID\n * @param {number} BuildingID - Building ID to retrieve\n * @returns Phone Templates\n */\nfunction getPhoneTemplates(BuildingID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const PhoneTemplates = yield nim.filterExecute(\"App_Cisco_Script_GetPhoneTemplates\", {\n            BuildingID: BuildingID,\n        });\n        if (PhoneTemplates && PhoneTemplates.length > 0) {\n            nim.logInfo(`Found Phone Templates for Building [${PhoneTemplates[0].BuildingID}]`);\n            return PhoneTemplates;\n        }\n        throw new Error(`Failed to retrieve Phone Templates for Building [${BuildingID}]`);\n    });\n}\n/**\n * Retrieves Universal Device Template\n * @param {string} UUID - Universal Device Template to retrieve\n * @returns Universal Device Template details\n */\nfunction getUniversalDeviceTemplate(UUID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const Templates = yield nim.filterExecute(\"App_Cisco_Script_GetCUCMUniversalTemplate\", {\n            UUID: UUID,\n        });\n        if (Templates && Templates.length == 1) {\n            nim.logInfo(`Found Universal Device Template [${Templates[0].uuid}]`);\n            return Templates[0];\n        }\n        else if (Templates && Templates.length > 1) {\n            nim.logError(`Found multiple universal device templates for [${UUID}]`);\n            throw new RangeError(`Found multiple universal device templates for [${UUID}]`);\n        }\n        throw new Error(`Failed to retrieve universal device template for [${UUID}]`);\n    });\n}\n/**\n * Retrieves Product\n * @param {string} Enum - Product Enum to retrieve\n * @returns Product details\n */\nfunction getProduct(Enum) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const Products = yield nim.filterExecute(\"App_Cisco_Script_GetCUCMProduct\", {\n            Enum: Enum,\n        });\n        if (Products && Products.length == 1) {\n            nim.logInfo(`Found Product [${Products[0].enum}]`);\n            return Products[0];\n        }\n        else if (Products && Products.length > 1) {\n            nim.logError(`Found product for [${Enum}]`);\n            throw new RangeError(`Found products for [${Enum}]`);\n        }\n        throw new Error(`Failed to get products for [${Enum}]`);\n    });\n}\n/**\n   * Retrieves Unity User Account for specified alias\n   * @param {string} alias - Alisa used to search for user\n   * @param {boolean} ignoreError - If True, ignore errors\n   * @returns Unity User Account\n   */\nfunction getUnityUser(alias, ignoreError) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let unityUser = yield nim.filterExecute(\"App_Cisco_Script_GetUnityUser\", {\n            Alias: alias\n        });\n        if (unityUser && unityUser.length == 1) {\n            nim.logInfo(`Found Unity user [${unityUser[0].ObjectId}]`);\n            return unityUser[0];\n        }\n        else if (unityUser && unityUser.length > 1 && !ignoreError) {\n            nim.logError(`Found multiple accounts for alias [${alias}]`);\n            throw new RangeError(`Found multiple accounts for extension [${alias}]`);\n        }\n        if (!ignoreError) {\n            nim.logError(`Cannot find Unity user for alias [${alias}]`);\n            throw new ReferenceError(`Cannot find Unity user for alias [${alias}]`);\n        }\n        return null;\n    });\n}\n/**\n   * Retrieves Unity User Account for specified extension\n   * @param {string} Extension - Extension used to search for user\n   * @returns Unity User Account\n   */\nfunction getUnityUserByExtension(Extension) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const unitUser = yield nim.filterExecute(\"App_Cisco_Script_GetUnityUserByExtension\", {\n            DtmfAccessId: Extension\n        });\n        if (unitUser && unitUser.length == 1) {\n            nim.logInfo(`Found Unity user [${unitUser[0].ObjectId}]`);\n            return unitUser[0];\n        }\n        else if (unitUser && unitUser.length > 1) {\n            nim.logError(`Found multiple accounts for extension [${Extension}]`);\n            throw new RangeError(`Found multiple accounts for extension [${Extension}]`);\n        }\n        nim.logError(`Cannot find Unity user for extension [${Extension}]`);\n        throw new ReferenceError(`Cannot find Unity user for extension [${Extension}]`);\n    });\n}\n/**\n   * Checks to see if extension is already being assigned\n   * @param {string} Extension - Extension used to search for user\n   * @returns {boolean} - True, if assigned\n   */\nfunction checkExtensionAssigned(Extension) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const unitUser = yield nim.filterExecute(\"App_Cisco_Script_GetUnityUserByExtension\", {\n            DtmfAccessId: Extension\n        });\n        return !!(unitUser && unitUser.length > 0);\n    });\n}\n/**\n * Retrieves specified Phone Line\n * @param {string} UUID - The unique identifier of phone line\n * @returns Phone Line\n */\nfunction getCUCMPhoneLine(UUID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const PhoneLine = yield nim.filterExecute(\"App_Cisco_Script_GetCUCMPhoneLine\", { UUID: UUID });\n        if (PhoneLine && PhoneLine.length == 1) {\n            nim.logInfo(`Found CUCM Line [${PhoneLine[0].uuid}]`);\n            return PhoneLine[0];\n        }\n        else if (PhoneLine && PhoneLine.length > 1) {\n            nim.logError(`Found multiple CUCM Lines for [${UUID}]`);\n            throw new RangeError(`Found multiple CUCM Phone Lines for [${UUID}]`);\n        }\n        nim.logError(`Cannot find CUCM Line for [${UUID}]`);\n        throw new ReferenceError(`Cannot find CUCM Line for [${UUID}]`);\n    });\n}\n/**\n * Retrieves specified Phone\n * @param {string} UUID - The unique identifier of phone\n * @returns Phone\n */\nfunction getCUCMPhone(UUID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const phone = yield nim.filterExecute(\"App_Cisco_Script_GetCUCMPhone\", {\n            UUID: UUID,\n        });\n        if (phone && phone.length == 1) {\n            nim.logInfo(`Found CUCM Phone [${phone[0].uuid}]`);\n            return phone[0];\n        }\n        else if (phone && phone.length > 1) {\n            nim.logError(`Found multiple CUCM Phone for [${UUID}]`);\n            throw new RangeError(`Found multiple CUCM Phone for [${UUID}]`);\n        }\n        nim.logError(`Cannot find CUCM Phone for [${UUID}]`);\n        throw new ReferenceError(`Cannot find CUCM Phone for [${UUID}]`);\n    });\n}\n/**\n* Generates a unique random number within a specified range that's not already in a given array.\n*\n* @param {number} upper - The upper bound of the random number range.\n* @param {number} lower - The lower bound of the random number range.\n* @param {string[]} existingArray - An array of numbers to check against for uniqueness.\n* @return {string} A unique random number not in the existing array.\n*/\nfunction generateUniqueRandom(upper, lower, existingArray) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let uniqueRandom;\n        do {\n            // Generate a random number between lower and upper (inclusive) and then convert it to a string\n            uniqueRandom = Math.floor(Math.random() * (upper - lower + 1) + lower).toString();\n        } while (existingArray.includes(uniqueRandom)); // Check if the generated number as string is in the array\n        return uniqueRandom; // Return the unique random number as a string\n    });\n}\nfunction deleteAfterFirstMatch(text, pattern) {\n    const index = text.indexOf(pattern); // Find the index of the first occurrence of the pattern\n    if (index >= 0) {\n        // If the pattern is found, return the substring up to that index\n        return text.substring(0, index);\n    }\n    // If the pattern is not found, return the original string\n    return text;\n}\n// #endregion\n// #region NIM Functions\n/**\n   * Updates the Phone Line assignment for user, additionally removing the current owner\n   * @param {string} PhoneLineUUID - The unique identifier of phone line\n   * @param {string} PhoneUUID - The unique identifier of phone\n   * @param {number} BuildingID - BuildingID\n   * @param {string} ExternalPhoneNumberMask - THe external phone number mask for building\n   * @param {string} CurrentUserId - Current owner username of the phone line\n   * @param {string} NewUserId - New owner username for the phone line\n   * @param {string} NewPhoneLabel - New phone label\n   * @param {string} NewPhoneName - New phone name\n   */\nfunction UpdateLineAssignment(PhoneLineUUID, PhoneUUID, BuildingID, ExternalPhoneNumberMask, ProvisionSoftPhone, CurrentUserId, NewUserId, NewPhoneLabel, NewPhoneName) {\n    var _a, _b, _c, _d, _e, _f;\n    return __awaiter(this, void 0, void 0, function* () {\n        // #region Validation of Resources\n        nim.logInfo(\"Validating resources prior to executing changes\");\n        // #region Retrieve Current Owner AD Account\n        nim.logInfo(\"Retrieving current AD user account\");\n        const currentOwnerADUser = yield getADUser(CurrentUserId);\n        // #endregion\n        // #region Retrieve New Owner AD Account\n        nim.logInfo(\"Retrieving new owner AD user account\");\n        const newOwnerADUser = yield getADUser(NewUserId);\n        // #endregion\n        // #region Retrieve CUCM Phone Line\n        nim.logInfo(\"Retrieving CUCM Phone Line\");\n        const cucmPhoneLine = yield getCUCMPhoneLine(PhoneLineUUID);\n        // #endregion\n        // #region Retrieve CUCM Phone\n        nim.logInfo(\"Retrieving CUCM Phone\");\n        const cucmPhone = yield getCUCMPhone(PhoneUUID);\n        // #endregion\n        // #region Retrieve Building\n        nim.logInfo(\"Retrieving Building\");\n        const Building = yield getBuilding(BuildingID);\n        // #endregion\n        // #region Retrieve Phone Templates\n        nim.logInfo(\"Retrieving Phone Templates\");\n        const PhoneTemplates = yield getPhoneTemplates(BuildingID);\n        // #endregion\n        // #region Get Parked Mailboxes\n        const parkedMailboxes = yield nim.filterExecute(\"App_Cisco_Script_GetParkedMailboxes\");\n        const parkedExtensions = parkedMailboxes.map(obj => obj.UnityUserExtension);\n        // #endregion\n        nim.logInfo(\"Validation completed\");\n        // #endregion\n        // #region Previous Owner Devices\n        nim.logInfo(\"Check if previous owner has associated devices and remove them\");\n        yield removeOwnerDevices(CurrentUserId);\n        // #endregion\n        // #region New Owner User Account\n        nim.logInfo(\"Check if new owner has CUCM User Account\");\n        const newOwnerCUCMUser = yield nim.filterExecute(\"App_Cisco_Script_GetCUCMUser\", { UserId: NewUserId });\n        if (newOwnerCUCMUser && (newOwnerCUCMUser === null || newOwnerCUCMUser === void 0 ? void 0 : newOwnerCUCMUser.length) < 1) {\n            nim.logInfo(`New Owner doesn't exist in CUCM, creating user`);\n            // TODO: Target Action create CUCM user\n        }\n        else {\n            nim.logInfo(`New Owner exists in CUCM, skipping creating user`);\n        }\n        // #endregion\n        // #region Update Directory Number Description\n        nim.logInfo(\"Updating Directory Number Description\");\n        nim.logInfo(`UUID: [${PhoneLineUUID}] - newOwnerUsername: [${NewUserId}] - newAlertingName: [${NewPhoneName}]`);\n        // TODO: Target Action\n        // #endregion\n        // #region Update Device-To-Line Description\n        nim.logInfo(\"Updating Device-To-Line Description\");\n        nim.logInfo(`LineUUID: [${cucmPhoneLine.uuid}] - lineIndex: [${cucmPhoneLine.index}] - dirnPattern: [${cucmPhoneLine.dirn_pattern}] - dirnRoutePartitionName: [${cucmPhoneLine.dirn_routePartitionName}] - newDescription: [${NewPhoneLabel}] - newName: [${NewPhoneName}] - newExternalCallingMask: [${ExternalPhoneNumberMask}]`);\n        // TODO: Target Action\n        // #endregion\n        // #region Update the Phone Owner\n        nim.logInfo(\"Updating Phone Owner\");\n        nim.logInfo(`LineUUID: [${cucmPhoneLine.uuid}] - newOwnerUsername: [${NewUserId}]`);\n        // TODO: Target Action\n        // #endregion\n        // #region New Owner Devices\n        nim.logInfo(\"Check if new owner has associated devices and remove\");\n        yield removeOwnerDevices(NewUserId);\n        // #endregion\n        // #region Update Soft Phone for new user\n        if (ProvisionSoftPhone) {\n            nim.logInfo(\"Updating Soft Phone for new owner\");\n            if (PhoneTemplates) {\n                for (const template of PhoneTemplates) {\n                    nim.logInfo(`Processing Phone Template [${template.ID}]`);\n                    let universalDeviceTemplate = yield getUniversalDeviceTemplate(template.UniversalDeviceTemplateUuid);\n                    let product = yield getProduct(template.ProductEnum);\n                    let phoneName = product.devicenameformat;\n                    phoneName = deleteAfterFirstMatch(phoneName, \"[\");\n                    phoneName = phoneName.replace('[', '');\n                    phoneName = phoneName + (newOwnerADUser === null || newOwnerADUser === void 0 ? void 0 : newOwnerADUser.sAMAccountName);\n                    phoneName = phoneName.toUpperCase();\n                    phoneName = phoneName.substring(0, 15);\n                    nim.logInfo(`Phone Template [${template.ID}] - Phone Name [${phoneName}]`);\n                    let phoneDescription = universalDeviceTemplate.deviceDescription;\n                    phoneDescription = phoneDescription === null || phoneDescription === void 0 ? void 0 : phoneDescription.replace('#LN#', (_a = newOwnerADUser === null || newOwnerADUser === void 0 ? void 0 : newOwnerADUser.sn) !== null && _a !== void 0 ? _a : '');\n                    phoneDescription = phoneDescription === null || phoneDescription === void 0 ? void 0 : phoneDescription.replace('#FN#', (_b = newOwnerADUser === null || newOwnerADUser === void 0 ? void 0 : newOwnerADUser.givenName) !== null && _b !== void 0 ? _b : '');\n                    phoneDescription = phoneDescription === null || phoneDescription === void 0 ? void 0 : phoneDescription.replace('#ID#', (_c = newOwnerADUser === null || newOwnerADUser === void 0 ? void 0 : newOwnerADUser.sAMAccountName) !== null && _c !== void 0 ? _c : '');\n                    phoneDescription = phoneDescription === null || phoneDescription === void 0 ? void 0 : phoneDescription.replace('#NAME#', (_d = newOwnerADUser === null || newOwnerADUser === void 0 ? void 0 : newOwnerADUser.displayName) !== null && _d !== void 0 ? _d : '');\n                    phoneDescription = phoneDescription === null || phoneDescription === void 0 ? void 0 : phoneDescription.replace('#EMAIL#', (_e = newOwnerADUser === null || newOwnerADUser === void 0 ? void 0 : newOwnerADUser.mail) !== null && _e !== void 0 ? _e : '');\n                    phoneDescription = phoneDescription === null || phoneDescription === void 0 ? void 0 : phoneDescription.replace('#DEPT#', (_f = newOwnerADUser === null || newOwnerADUser === void 0 ? void 0 : newOwnerADUser.department) !== null && _f !== void 0 ? _f : '');\n                    phoneDescription = phoneDescription === null || phoneDescription === void 0 ? void 0 : phoneDescription.replace('#DIRN#', cucmPhoneLine.dirn_pattern);\n                    phoneDescription = phoneDescription === null || phoneDescription === void 0 ? void 0 : phoneDescription.replace('#PRODUCT#', product.name);\n                    nim.logInfo(`Phone Template [${template.ID}] - Phone Description [${phoneDescription}]`);\n                    //TODO Target Action Add Phone\n                    //TODO Target Action Update Phone Line\n                    //TODO Target Action Update Phone Line User Association\n                    //Should be added to tables but we may need to track this new device separately.\n                }\n            }\n            else {\n                nim.logInfo(\"No phone templates to process\");\n            }\n        }\n        else {\n            nim.logInfo(\"Skipping Soft Phone for new owner\");\n        }\n        // TODO: If condition, Soft phones enabled?\n        // TODO: process room templates\n        // TODO: Target Action\n        // #endregion\n        // #region Update New Owner associated devices with all phone names\n        nim.logInfo(\"Update New Owner Associated devices phone names\");\n        const newOwnerDevices = yield getOwnerAssociatedDevices(NewUserId);\n        for (const device of newOwnerDevices) {\n            nim.logInfo(`Set Name for Device [${device.name}]`);\n            // TODO: Target Action\n        }\n        ;\n        // #endregion\n        // #region Update New Owner Primary Extension\n        nim.logInfo(\"Updating New Owner primary extension\");\n        nim.logInfo(`newOwnerUsername: [${NewUserId}] - dirnPattern: [${cucmPhoneLine.dirn_pattern}] - dirnRoutePartitionName: [${cucmPhoneLine.dirn_routePartitionName}]`);\n        // #endregion\n        // #region Update IPPhone for AD User\n        nim.logInfo(`Updating [ipPhone] for New Owner to [${cucmPhoneLine.dirn_pattern}]`);\n        // TODO: Update Target Action\n        // await nim.targetSystemFunctionRun(systemname_AD, 'UserUpdate',{ objectGUID: newOwnerADUser.objectGUID })\n        // #endregion\n        // #region Update telephoneNumber for AD User\n        nim.logInfo(`Updating [telephoneNumber] for New Owner to [${cucmPhoneLine.dirn_pattern}]`);\n        // TODO: Update Target Action\n        // await nim.targetSystemFunctionRun(systemname_AD, 'UserUpdate',{ objectGUID: newOwnerADUser.objectGUID })\n        // #endregion\n        // #region Reassign current extension owner, Update AD User\n        nim.logInfo(\"Checking target extension is taken in Unity\");\n        if (yield checkExtensionAssigned(cucmPhoneLine.dirn_pattern)) {\n            let CurrentUnityUser = yield getUnityUserByExtension(cucmPhoneLine.dirn_pattern);\n            if (CurrentUnityUser.Alias.toLowerCase() !== (newOwnerADUser === null || newOwnerADUser === void 0 ? void 0 : newOwnerADUser.sAMAccountName.toLowerCase())) {\n                //Get unique advailable parked extension\n                let uniqueParkedExtension = yield generateUniqueRandom(parkedmailbox_ExtensionUpper, parkedmailbox_ExtensionLower, parkedExtensions);\n                // TODO: Target action write back parked mailbox to internal database\n                // TODO: Target action assign random extension to current user\n                if (currentOwnerADUser && currentOwnerADUser.sAMAccountName.length > 0) {\n                    nim.logInfo(\"Updating Current Owner AD User Account\");\n                    nim.logInfo(`objectGUID: [${currentOwnerADUser.objectGUID}] - ipPhone: [${uniqueParkedExtension}] - telephoneNumber: [${uniqueParkedExtension}]`);\n                    // TODO: Target action update ipPhone and telephone Number for current User\n                }\n            }\n        }\n        // #endregion\n        // #region Check New Owner in Unity\n        nim.logInfo(\"Checking if new owner has unity user account\");\n        let newOwnerUnityAccount = yield getUnityUser(NewUserId, true);\n        if (newOwnerUnityAccount && newOwnerUnityAccount.ObjectId.length < 1) {\n            nim.logInfo(\"Creating Unity user account for new owner\");\n            // TODO Target action create unity account\n            // Create Unity User\n            // Add SMTP Address\n            // Add Unified Messaging\n        }\n        else {\n            nim.logInfo(\"Updating Unity user account for new owner\");\n            // Update User Extension\n            // Add/Update SMTP Address\n            // Add/Update Unified Messaging\n        }\n        // #endregion\n        // #region Update New Owner Call Schedule\n        nim.logInfo(\"Updating Unity call schedule for new owner\");\n        // TODO: Target Action\n        // #endregion\n        // #region New Owner Transfer Rules\n        nim.logInfo(\"Checking if User Transfer Rules enabled for Building\");\n        if (Building === null || Building === void 0 ? void 0 : Building.UnityUserTransferRulesEnabled) {\n            nim.logInfo(\"Updating User Transfer Rules\");\n            //TODO Target Action Update Standard Transfer Rule\n            //TODO Target Action Update Closed Transfer Rule\n            //TODO Target Action Update Alternative Transfer Rule\n        }\n    });\n}\nexports.UpdateLineAssignment = UpdateLineAssignment;\n// #endregion\n","production_ready":true,"message":"","signatures":[{"name":"UpdateLineAssignment","input_args":[{"name":"PhoneLineUUID","type":0},{"name":"PhoneUUID","type":0},{"name":"BuildingID","type":1},{"name":"ExternalPhoneNumberMask","type":0},{"name":"ProvisionSoftPhone","type":2},{"name":"CurrentUserId","type":0},{"name":"NewUserId","type":0},{"name":"NewPhoneLabel","type":0},{"name":"NewPhoneName","type":0}],"output_args":[]}]}