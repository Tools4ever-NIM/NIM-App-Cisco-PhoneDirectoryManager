{"name":"CiscoUnity","studio_file_name":"","typescript":"import { nim } from './nim'\n\n// Configuration\nconst systemname_AD = 'AD'\n\n\n// Functions\nasync function getOwnerDevices (OwnerId: string) {\n  return await nim.filterExecute(\"App_Cisco_Script_GetCUCMUserAssociatedDevices\",{UserId:OwnerId})\n}\n\nasync function removeOwnerDevices (OwnerId: string) {\n  const previousOwnerDevices = await getOwnerDevices(OwnerId)\n\n  if(previousOwnerDevices && previousOwnerDevices?.length > 0) {\n    nim.logInfo(`Previous Owner [${OwnerId}]has ${previousOwnerDevices?.length} Devices`)\n    \n    // Loop over each Devices\n    previousOwnerDevices.forEach(function (device) {\n      nim.logInfo(`Device Name - [${device.name}]`)\n\n      // Skip Physical Phones\n      if(!device.name.startsWith(\"SEP\")) {\n        nim.logInfo(`Remove Device - [${device.name}]`)\n        //TODO: Target action remove device\n      } else {\n        nim.logInfo(`Skipping Device Removal - [${device.name}]`)\n      }\n    })\n  } else {\n    nim.logInfo(`No devices found for previous owner`)\n  }\n}\n\nasync function getADUser (sAMAccountName: string) {\n  const adUser = await nim.filterExecute(\"App_Cisco_Script_GetADUser\",{sAMAccountName:sAMAccountName})\n\n  if(adUser && adUser.length == 1) {\n    nim.logInfo(`Found AD user [${adUser[0].objectGUID}]`)\n    return adUser[0]\n  }\n  else if(adUser && adUser.length > 1) {\n    nim.logError(`Found multiple accounts for [${sAMAccountName}]`)\n    throw new RangeError(`Found multiple accounts for [${sAMAccountName}]`)\n  } \n\n  nim.logError(`Cannot find AD user for [${sAMAccountName}]`)\n  throw new ReferenceError(`Cannot find AD user for [${sAMAccountName}]`)\n}\n\nasync function getCUCMPhoneLine (UUID: string) {\n  const PhoneLine = await nim.filterExecute(\"App_Cisco_Script_GetCUCMPhoneLine\", {UUID: UUID} )\n  \n  if(PhoneLine && PhoneLine.length == 1) {\n    nim.logInfo(`Found CUCM Line [${PhoneLine[0].uuid}]`)\n    return PhoneLine[0]\n  }\n  else if(PhoneLine && PhoneLine.length > 1) {\n    nim.logError(`Found multiple CUCM Lines for [${UUID}]`)\n    throw new RangeError(`Found multiple CUCM Phone Lines for [${UUID}]`)\n  } \n\n  nim.logError(`Cannot find CUCM Line for [${UUID}]`)\n  throw new ReferenceError(`Cannot find CUCM Line for [${UUID}]`)\n}\n\nasync function getCUCMPhone (UUID: string) {\n  const phone = await nim.filterExecute(\"App_Cisco_Script_GetCUCMPhone\", {UUID: UUID} )\n  \n  if(phone && phone.length == 1) {\n    nim.logInfo(`Found CUCM Phone [${phone[0].uuid}]`)\n    return phone[0]\n  }\n  else if(phone && phone.length > 1) {\n    nim.logError(`Found multiple CUCM Phone for [${UUID}]`)\n    throw new RangeError(`Found multiple CUCM Phone for [${UUID}]`)\n  } \n  nim.logError(`Cannot find CUCM Phone for [${UUID}]`)\n  throw new ReferenceError(`Cannot find CUCM Phone for [${UUID}]`)\n}\n\nexport async function userTest (PreviousUserId: string, NewUserId: string, LineUUID: string, PhoneUUID: string, DimPattern: string, NewPhoneLabel: string, NewPhoneName: string) {\n  \n  // #region Validation of Resources\n    nim.logInfo(\"Validating resources prior to executing changes\")\n    \n    // #region Retrieve New Owner AD Account\n      nim.logInfo(\"Retrieving new owner AD user account\")\n      const newOwnerADUser = await getADUser(NewUserId)\n    // #endregion\n\n    // #region Retrieve CUCM Phone Line\n      nim.logInfo(\"Retrieving CUCM Phone Line\")\n      const cucmPhoneLine = await getCUCMPhoneLine(LineUUID)\n    // #endregion \n\n    // #region Retrieve CUCM Phone\n      nim.logInfo(\"Retrieving CUCM Phone\")\n      const cucmPhone = await getCUCMPhone(PhoneUUID)\n    // #endregion\n  \n  // #endregion\n\n  // #region Previous Owner Devices\n    //Check for Previous Owner for Line, Remove Devices\n    nim.logInfo(\"Check if previous owner has associated devices\")\n    removeOwnerDevices(PreviousUserId)\n  // #endregion\n\n  // #region New Owner User Account\n    nim.logInfo(\"Check if new owner has CUCM User Account\")\n    const newOwnerCUCMUser = await nim.filterExecute('App_Cisco_Script_GetCUCMUser',{UserId:NewUserId})\n\n    if(newOwnerCUCMUser && newOwnerCUCMUser?.length < 1) {\n      // Create CUCM User\n      nim.logInfo(`New Owner doesn't exist in CUCM, creating user`)\n      // TODO: Target Action create CUCM user\n    } else {\n      nim.logInfo(`New Owner exists in CUCM, skipping creating user`)\n    }\n  // #endregion\n\n\n\n  // #region Update Directory Number Description\n    nim.logInfo(\"Updating Directory Number Description\")\n    nim.logInfo(`UUID: [${LineUUID}] - newOwnerUsername: [${NewUserId}] - newAlertingName: ${NewPhoneName}`)\n    // TODO: Target Action \n    \n  // #endregion\n\n  // #region Update Device-To-Line Description\n    nim.logInfo(\"Updating Device-To-Line Description\")\n    // TODO: line.Index, room.ExternalPhoneNumberMask\n    nim.logInfo(`LineUUID: [${cucmPhoneLine.uuid}] - lineIndex: [?] - dirnPattern: [${cucmPhoneLine.dirn_pattern}] - dirnRoutePartitionName: [${cucmPhoneLine.dirn_routePartitionName}] - newDescription: [${NewPhoneLabel}] - newName: [${NewPhoneName}] - newExternalCallingMask: [?]`)\n    // TODO: Target Action\n  // #endregion\n\n  // #region Update the Phone Owner\n    nim.logInfo(\"Updating Phone Owner\")\n    nim.logInfo(`LineUUID: [${cucmPhoneLine.uuid}] - newOwnerUsername: [${NewUserId}]`)\n    // TODO: Target Action\n  // #endregion\n\n  // #region New Owner Devices\n    //Check for New Owner for Line, Remove Devices\n    nim.logInfo(\"Check if new owner has associated devices\")\n    await removeOwnerDevices(NewUserId)\n  // #endregion\n\n  // #region Update Soft Phone for new user\n    nim.logInfo(\"Updating Soft Phone for new user\")\n\n    // TODO: If condition, Soft phones enabled?\n    // TODO: process room templates\n\n    // TODO: Target Action\n  // #endregion\n\n  // #region Update New Owner associated devices with all phone names\n    nim.logInfo(\"New Owner Associate devices phone names\")\n    const newOwnerDevices = await getOwnerDevices(NewUserId)\n    newOwnerDevices.forEach(function (device) {\n      nim.logInfo(`Set Name for Device [${device.name}]`)\n      // TODO: Target Action\n    })\n  // #endregion\n\n  // #region Update New Owner Primary Extension\n    nim.logInfo(\"Updating New Owner primary extension\")\n    nim.logInfo(`newOwnerUsername: [${NewUserId}] - dirnPattern: [${cucmPhoneLine.dirn_pattern}] - dirnRoutePartitionName: [${cucmPhoneLine.dirn_routePartitionName}]`)\n  // #endregion\n\n  // #region Update IPPhone for AD User\n    nim.logInfo(`Updating [ipPhone] for New Owner to [${cucmPhoneLine.dirn_pattern}]`)\n    \n    // TODO: Update Target Action\n    // await nim.targetSystemFunctionRun(systemname_AD, 'UserUpdate',{ objectGUID: newOwnerADUser.objectGUID })\n  // #endregion\n\n  // #region Update telephoneNumber for AD User\n    nim.logInfo(`Updating [telephoneNumber] for New Owner to [${cucmPhoneLine.dirn_pattern}]`)\n    \n    // TODO: Update Target Action\n    // await nim.targetSystemFunctionRun(systemname_AD, 'UserUpdate',{ objectGUID: newOwnerADUser.objectGUID })\n  // #endregion\n\n  // #region Reassign current extension owner\n    nim.logInfo(\"Checking target extension is taken in Unity\")\n    \n    // TODO: If condition, check if extension taken\n      // TODO: True\n        // Retrieve assigned user to extension\n        // TODO: If condition, check if new owner matches current owner\n          // TODO: True\n            // Assign random extension to current assigned user, make sure not taken\n            // Store in lookup table as parked mailbox\n            // Updated Assigned User in AD (ipPhone, telephoneNumber)\n          // False\n            // Do Nothing\n      // False\n        // Do nothing\n  // #endregion\n\n  // #region Check New Owner in Unity\n    // TODO: If condition, new owner exists in Unity\n      // False\n        // Create Unity User\n        // Add SMTP Address\n        // Add Unified Messaging\n      // True\n        // Update User Extension\n        // Add/Update SMTP Address\n        // Add/Update Unified Messaging\n  // #endregion\n\n  // #region Update New Owner Call Schedule\n    // TODO: Target Action\n  // #endregion\n\n  // #region New Owner Transfer Rules\n    // TODO: If Condition, check if User Transfer Rules Enabled\n      // True\n        // Update User Standard Transfer Rule\n        // Update User Closed Transfer Rule\n        // Update User Alternative Transfer Rule\n      // False\n        // Do Nothing\n  // #endregion\n\n  // #region Check Email Enabled and Send Notification\n    // TODO: If Condition, check settings for email enabled\n      // True\n        // Send Notification\n      // False\n        // Do Nothing\n  // #endregion \n}","javascript":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.userTest = void 0;\n/// <reference types=\"node\" />\n// Configuration\nconst systemname_AD = 'AD';\n// Functions\nfunction getOwnerDevices(OwnerId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield nim.filterExecute(\"App_Cisco_Script_GetCUCMUserAssociatedDevices\", { UserId: OwnerId });\n    });\n}\nfunction removeOwnerDevices(OwnerId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const previousOwnerDevices = yield getOwnerDevices(OwnerId);\n        if (previousOwnerDevices && (previousOwnerDevices === null || previousOwnerDevices === void 0 ? void 0 : previousOwnerDevices.length) > 0) {\n            nim.logInfo(`Previous Owner [${OwnerId}]has ${previousOwnerDevices === null || previousOwnerDevices === void 0 ? void 0 : previousOwnerDevices.length} Devices`);\n            // Loop over each Devices\n            previousOwnerDevices.forEach(function (device) {\n                nim.logInfo(`Device Name - [${device.name}]`);\n                // Skip Physical Phones\n                if (!device.name.startsWith(\"SEP\")) {\n                    nim.logInfo(`Remove Device - [${device.name}]`);\n                    //TODO: Target action remove device\n                }\n                else {\n                    nim.logInfo(`Skipping Device Removal - [${device.name}]`);\n                }\n            });\n        }\n        else {\n            nim.logInfo(`No devices found for previous owner`);\n        }\n    });\n}\nfunction getADUser(sAMAccountName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const adUser = yield nim.filterExecute(\"App_Cisco_Script_GetADUser\", { sAMAccountName: sAMAccountName });\n        if (adUser && adUser.length == 1) {\n            nim.logInfo(`Found AD user [${adUser[0].objectGUID}]`);\n            return adUser[0];\n        }\n        else if (adUser && adUser.length > 1) {\n            nim.logError(`Found multiple accounts for [${sAMAccountName}]`);\n            throw new RangeError(`Found multiple accounts for [${sAMAccountName}]`);\n        }\n        nim.logError(`Cannot find AD user for [${sAMAccountName}]`);\n        throw new ReferenceError(`Cannot find AD user for [${sAMAccountName}]`);\n    });\n}\nfunction getCUCMPhoneLine(UUID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const PhoneLine = yield nim.filterExecute(\"App_Cisco_Script_GetCUCMPhoneLine\", { UUID: UUID });\n        if (PhoneLine && PhoneLine.length == 1) {\n            nim.logInfo(`Found CUCM Line [${PhoneLine[0].uuid}]`);\n            return PhoneLine[0];\n        }\n        else if (PhoneLine && PhoneLine.length > 1) {\n            nim.logError(`Found multiple CUCM Lines for [${UUID}]`);\n            throw new RangeError(`Found multiple CUCM Phone Lines for [${UUID}]`);\n        }\n        nim.logError(`Cannot find CUCM Line for [${UUID}]`);\n        throw new ReferenceError(`Cannot find CUCM Line for [${UUID}]`);\n    });\n}\nfunction getCUCMPhone(UUID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const phone = yield nim.filterExecute(\"App_Cisco_Script_GetCUCMPhone\", { UUID: UUID });\n        if (phone && phone.length == 1) {\n            nim.logInfo(`Found CUCM Phone [${phone[0].uuid}]`);\n            return phone[0];\n        }\n        else if (phone && phone.length > 1) {\n            nim.logError(`Found multiple CUCM Phone for [${UUID}]`);\n            throw new RangeError(`Found multiple CUCM Phone for [${UUID}]`);\n        }\n        nim.logError(`Cannot find CUCM Phone for [${UUID}]`);\n        throw new ReferenceError(`Cannot find CUCM Phone for [${UUID}]`);\n    });\n}\nfunction userTest(PreviousUserId, NewUserId, LineUUID, PhoneUUID, DimPattern, NewPhoneLabel, NewPhoneName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // #region Validation of Resources\n        nim.logInfo(\"Validating resources prior to executing changes\");\n        // #region Retrieve New Owner AD Account\n        nim.logInfo(\"Retrieving new owner AD user account\");\n        const newOwnerADUser = yield getADUser(NewUserId);\n        // #endregion\n        // #region Retrieve CUCM Phone Line\n        nim.logInfo(\"Retrieving CUCM Phone Line\");\n        const cucmPhoneLine = yield getCUCMPhoneLine(LineUUID);\n        // #endregion \n        // #region Retrieve CUCM Phone\n        nim.logInfo(\"Retrieving CUCM Phone\");\n        const cucmPhone = yield getCUCMPhone(PhoneUUID);\n        // #endregion\n        // #endregion\n        // #region Previous Owner Devices\n        //Check for Previous Owner for Line, Remove Devices\n        nim.logInfo(\"Check if previous owner has associated devices\");\n        removeOwnerDevices(PreviousUserId);\n        // #endregion\n        // #region New Owner User Account\n        nim.logInfo(\"Check if new owner has CUCM User Account\");\n        const newOwnerCUCMUser = yield nim.filterExecute('App_Cisco_Script_GetCUCMUser', { UserId: NewUserId });\n        if (newOwnerCUCMUser && (newOwnerCUCMUser === null || newOwnerCUCMUser === void 0 ? void 0 : newOwnerCUCMUser.length) < 1) {\n            // Create CUCM User\n            nim.logInfo(`New Owner doesn't exist in CUCM, creating user`);\n            // TODO: Target Action create CUCM user\n        }\n        else {\n            nim.logInfo(`New Owner exists in CUCM, skipping creating user`);\n        }\n        // #endregion\n        // #region Update Directory Number Description\n        nim.logInfo(\"Updating Directory Number Description\");\n        nim.logInfo(`UUID: [${LineUUID}] - newOwnerUsername: [${NewUserId}] - newAlertingName: ${NewPhoneName}`);\n        // TODO: Target Action \n        // #endregion\n        // #region Update Device-To-Line Description\n        nim.logInfo(\"Updating Device-To-Line Description\");\n        // TODO: line.Index, room.ExternalPhoneNumberMask\n        nim.logInfo(`LineUUID: [${cucmPhoneLine.uuid}] - lineIndex: [?] - dirnPattern: [${cucmPhoneLine.dirn_pattern}] - dirnRoutePartitionName: [${cucmPhoneLine.dirn_routePartitionName}] - newDescription: [${NewPhoneLabel}] - newName: [${NewPhoneName}] - newExternalCallingMask: [?]`);\n        // TODO: Target Action\n        // #endregion\n        // #region Update the Phone Owner\n        nim.logInfo(\"Updating Phone Owner\");\n        nim.logInfo(`LineUUID: [${cucmPhoneLine.uuid}] - newOwnerUsername: [${NewUserId}]`);\n        // TODO: Target Action\n        // #endregion\n        // #region New Owner Devices\n        //Check for New Owner for Line, Remove Devices\n        nim.logInfo(\"Check if new owner has associated devices\");\n        yield removeOwnerDevices(NewUserId);\n        // #endregion\n        // #region Update Soft Phone for new user\n        nim.logInfo(\"Updating Soft Phone for new user\");\n        // TODO: If condition, Soft phones enabled?\n        // TODO: process room templates\n        // TODO: Target Action\n        // #endregion\n        // #region Update New Owner associated devices with all phone names\n        nim.logInfo(\"New Owner Associate devices phone names\");\n        const newOwnerDevices = yield getOwnerDevices(NewUserId);\n        newOwnerDevices.forEach(function (device) {\n            nim.logInfo(`Set Name for Device [${device.name}]`);\n            // TODO: Target Action\n        });\n        // #endregion\n        // #region Update New Owner Primary Extension\n        nim.logInfo(\"Updating New Owner primary extension\");\n        nim.logInfo(`newOwnerUsername: [${NewUserId}] - dirnPattern: [${cucmPhoneLine.dirn_pattern}] - dirnRoutePartitionName: [${cucmPhoneLine.dirn_routePartitionName}]`);\n        // #endregion\n        // #region Update IPPhone for AD User\n        nim.logInfo(`Updating [ipPhone] for New Owner to [${cucmPhoneLine.dirn_pattern}]`);\n        // TODO: Update Target Action\n        // await nim.targetSystemFunctionRun(systemname_AD, 'UserUpdate',{ objectGUID: newOwnerADUser.objectGUID })\n        // #endregion\n        // #region Update telephoneNumber for AD User\n        nim.logInfo(`Updating [telephoneNumber] for New Owner to [${cucmPhoneLine.dirn_pattern}]`);\n        // TODO: Update Target Action\n        // await nim.targetSystemFunctionRun(systemname_AD, 'UserUpdate',{ objectGUID: newOwnerADUser.objectGUID })\n        // #endregion\n        // #region Reassign current extension owner\n        nim.logInfo(\"Checking target extension is taken in Unity\");\n        // TODO: If condition, check if extension taken\n        // TODO: True\n        // Retrieve assigned user to extension\n        // TODO: If condition, check if new owner matches current owner\n        // TODO: True\n        // Assign random extension to current assigned user, make sure not taken\n        // Store in lookup table as parked mailbox\n        // Updated Assigned User in AD (ipPhone, telephoneNumber)\n        // False\n        // Do Nothing\n        // False\n        // Do nothing\n        // #endregion\n        // #region Check New Owner in Unity\n        // TODO: If condition, new owner exists in Unity\n        // False\n        // Create Unity User\n        // Add SMTP Address\n        // Add Unified Messaging\n        // True\n        // Update User Extension\n        // Add/Update SMTP Address\n        // Add/Update Unified Messaging\n        // #endregion\n        // #region Update New Owner Call Schedule\n        // TODO: Target Action\n        // #endregion\n        // #region New Owner Transfer Rules\n        // TODO: If Condition, check if User Transfer Rules Enabled\n        // True\n        // Update User Standard Transfer Rule\n        // Update User Closed Transfer Rule\n        // Update User Alternative Transfer Rule\n        // False\n        // Do Nothing\n        // #endregion\n        // #region Check Email Enabled and Send Notification\n        // TODO: If Condition, check settings for email enabled\n        // True\n        // Send Notification\n        // False\n        // Do Nothing\n        // #endregion \n    });\n}\nexports.userTest = userTest;\n","production_ready":true,"message":"","signatures":[{"name":"userTest","input_args":[{"name":"PreviousUserId","type":0},{"name":"NewUserId","type":0},{"name":"LineUUID","type":0},{"name":"PhoneUUID","type":0},{"name":"DimPattern","type":0},{"name":"NewPhoneLabel","type":0},{"name":"NewPhoneName","type":0}],"output_args":[]}]}