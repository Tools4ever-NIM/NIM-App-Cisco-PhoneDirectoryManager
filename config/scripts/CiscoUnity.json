{"name":"CiscoUnity","studio_file_name":"","typescript":"import { nim } from './nim'\n\nexport async function userTest (PreviousUserId: string, NewUserId: string) {\n  nim.logInfo(\"Check if previous owner has associated devices\")\n  const previousOwnerDevices = await nim.filterExecute(\"App_Cisco_Script_GetUserAssociatedDevices\",{UserId:PreviousUserId})\n\n  if(previousOwnerDevices && previousOwnerDevices?.length > 0) {\n    nim.logInfo(`Previous Owner has ${previousOwnerDevices?.length} Devices`)\n\n    previousOwnerDevices.forEach(function (device) {\n      // to do\n    })\n    nim.logInfo(\"Remove soft phones from line's previous owner\")\n  } else {\n    nim.logInfo(`No devices found for previous owner`)\n  }\n\n}","javascript":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.userTest = void 0;\n/// <reference types=\"node\" />\nfunction userTest(PreviousUserId, NewUserId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        nim.logInfo(\"Check if previous owner has associated devices\");\n        const previousOwnerDevices = yield nim.filterExecute(\"App_Cisco_Script_GetUserAssociatedDevices\", { UserId: PreviousUserId });\n        if (previousOwnerDevices && (previousOwnerDevices === null || previousOwnerDevices === void 0 ? void 0 : previousOwnerDevices.length) > 0) {\n            nim.logInfo(`Previous Owner has ${previousOwnerDevices === null || previousOwnerDevices === void 0 ? void 0 : previousOwnerDevices.length} Devices`);\n            previousOwnerDevices.forEach(function (device) {\n                // to do\n            });\n            nim.logInfo(\"Remove soft phones from line's previous owner\");\n        }\n        else {\n            nim.logInfo(`No devices found for previous owner`);\n        }\n    });\n}\nexports.userTest = userTest;\n","production_ready":true,"message":"","signatures":[{"name":"userTest","input_args":[{"name":"PreviousUserId","type":0},{"name":"NewUserId","type":0}],"output_args":[]}]}