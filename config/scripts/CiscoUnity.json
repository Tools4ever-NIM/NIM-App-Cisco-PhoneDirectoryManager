{"name":"CiscoUnity","studio_file_name":"","typescript":"import { nim } from './nim'\n\nexport async function userTest (PreviousUserId: string, NewUserId: string) {\n  \n  // #region Previous Owner Devices\n    //Check for Previous Owner for Line, Remove Devices\n    nim.logInfo(\"Check if previous owner has associated devices\")\n    const previousOwnerDevices = await nim.filterExecute(\"App_Cisco_Script_GetUserAssociatedDevices\",{UserId:PreviousUserId})\n\n    if(previousOwnerDevices && previousOwnerDevices?.length > 0) {\n      nim.logInfo(`Previous Owner has ${previousOwnerDevices?.length} Devices`)\n      \n      // Loop over each Devices\n      previousOwnerDevices.forEach(function (device) {\n        nim.logInfo(`Device Name - [${device.name}]`)\n\n        // Skip Physical Phones\n        if(!device.name.startsWith(\"SEP\")) {\n          nim.logInfo(`Remove Device - [${device.name}]`)\n          //TODO: Target action remove device\n        } else {\n          nim.logInfo(`Skipping Device Removal - [${device.name}]`)\n        }\n      })\n    } else {\n      nim.logInfo(`No devices found for previous owner`)\n    }\n  // #endregion\n\n  // #region New Owner User Account\n    nim.logInfo(\"Check if new owner has CUCM User Account\")\n    const newOwnerCUCMUser = await nim.filterExecute('App_Cisco_Script_GetUser',{UserId:NewUserId})\n\n    if(newOwnerCUCMUser && newOwnerCUCMUser?.length < 1) {\n      // Create CUCM User\n      nim.logInfo(`New Owner doesn't exist in CUCM, creating user`)\n      // TODO: Target Action create CUCM user\n    } else {\n      nim.logInfo(`New Owner exists in CUCM, skipping creating user`)\n    }\n  // #endregion\n\n  // #region Update Directory Number Description\n    nim.logInfo(\"Updating Directory Number Description\")\n    throw new ReferenceError('testing error')\n    // TODO: Target Action \n  // #endregion\n\n  // #region Update Device-To-Line Description\n    nim.logInfo(\"Updating Device-To-Line Description\")\n    // TODO: Target Action\n  // #endregion\n\n  // #region Update the Phone Owner\n    nim.logInfo(\"Updating Phone Owner\")\n    // TODO: Target Action\n  // #endregion\n\n  // #region New Owner Devices\n    //TODO: Deduplicate removal logic into separate function\n    //Check for New Owner for Line, Remove Devices\n    nim.logInfo(\"Check if new owner has associated devices\")\n    const newOwnerDevices = await nim.filterExecute(\"App_Cisco_Script_GetUserAssociatedDevices\",{UserId:NewUserId})\n\n    if(newOwnerDevices && newOwnerDevices?.length > 0) {\n      nim.logInfo(`New Owner has ${newOwnerDevices?.length} Devices`)\n      \n      // Loop over each Devices\n      newOwnerDevices.forEach(function (device) {\n        nim.logInfo(`Device Name - [${device.name}]`)\n\n        // Skip Physical Phones\n        if(!device.name.startsWith(\"SEP\")) {\n          nim.logInfo(`Remove Device - [${device.name}]`)\n          //TODO: Target action remove device\n        } else {\n          nim.logInfo(`Skipping Device Removal - [${device.name}]`)\n        }\n      })\n    } else {\n      nim.logInfo(`No devices found for new owner`)\n    }\n    // TODO: Target Action\n  // #endregion\n\n  // #region Update Soft Phone for new user\n    nim.logInfo(\"Updating Soft Phone for new user\")\n    // TODO: Target Action\n  // #endregion\n\n  // #region Update User's associated devices with all phone names\n    nim.logInfo(\"New Owner Associate devices phone names\")\n    // TODO: Target Action\n  // #endregion\n\n  // #region Update IPPhone for AD User\n    nim.logInfo(\"Updating [ipPhone] for New Owner\")\n    // TODO: Target Action\n  // #endregion\n\n    // #region Update telephoneNumber for AD User\n      nim.logInfo(\"Updating [telephoneNumber] for New Owner\")\n      // TODO: Target Action\n    // #endregion\n\n    // #region Reassign current extension owner\n      nim.logInfo(\"Checking target extension is taken in Unity\")\n      \n      // TODO: If condition, check if extension taken\n        // TODO: True\n          // Retrieve assigned user to extension\n          // TODO: If condition, check if new owner matches current owner\n            // TODO: True\n              // Assign random extension to current assigned user, make sure not taken\n              // Store in lookup table as parked mailbox\n              // Updated Assigned User in AD (ipPhone, telephoneNumber)\n            // False\n              // Do Nothing\n        // False\n          // Do nothing\n    // #endregion\n\n    // #region Check New Owner in Unity\n      // TODO: If condition, new owner exists in Unity\n        // False\n          // Create Unity User\n          // Add SMTP Address\n          // Add Unified Messaging\n        // True\n          // Update User Extension\n          // Add/Update SMTP Address\n          // Add/Update Unified Messaging\n    // #endregion\n\n    // #region Update New Owner Call Schedule\n      // TODO: Target Action\n    // #endregion\n\n    // #region New Owner Transfer Rules\n      // TODO: If Condition, check if User Transfer Rules Enabled\n        // True\n          // Update User Standard Transfer Rule\n          // Update User Closed Transfer Rule\n          // Update User Alternative Transfer Rule\n        // False\n          // Do Nothing\n    // #endregion\n\n    // #region Check Email Enabled and Send Notification\n      // TODO: If Condition, check settings for email enabled\n        // True\n          // Send Notification\n        // False\n          // Do Nothing\n    // #endregion \n}","javascript":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.userTest = void 0;\n/// <reference types=\"node\" />\nfunction userTest(PreviousUserId, NewUserId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // #region Previous Owner Devices\n        //Check for Previous Owner for Line, Remove Devices\n        nim.logInfo(\"Check if previous owner has associated devices\");\n        const previousOwnerDevices = yield nim.filterExecute(\"App_Cisco_Script_GetUserAssociatedDevices\", { UserId: PreviousUserId });\n        if (previousOwnerDevices && (previousOwnerDevices === null || previousOwnerDevices === void 0 ? void 0 : previousOwnerDevices.length) > 0) {\n            nim.logInfo(`Previous Owner has ${previousOwnerDevices === null || previousOwnerDevices === void 0 ? void 0 : previousOwnerDevices.length} Devices`);\n            // Loop over each Devices\n            previousOwnerDevices.forEach(function (device) {\n                nim.logInfo(`Device Name - [${device.name}]`);\n                // Skip Physical Phones\n                if (!device.name.startsWith(\"SEP\")) {\n                    nim.logInfo(`Remove Device - [${device.name}]`);\n                    //TODO: Target action remove device\n                }\n                else {\n                    nim.logInfo(`Skipping Device Removal - [${device.name}]`);\n                }\n            });\n        }\n        else {\n            nim.logInfo(`No devices found for previous owner`);\n        }\n        // #endregion\n        // #region New Owner User Account\n        nim.logInfo(\"Check if new owner has CUCM User Account\");\n        const newOwnerCUCMUser = yield nim.filterExecute('App_Cisco_Script_GetUser', { UserId: NewUserId });\n        if (newOwnerCUCMUser && (newOwnerCUCMUser === null || newOwnerCUCMUser === void 0 ? void 0 : newOwnerCUCMUser.length) < 1) {\n            // Create CUCM User\n            nim.logInfo(`New Owner doesn't exist in CUCM, creating user`);\n            // TODO: Target Action create CUCM user\n        }\n        else {\n            nim.logInfo(`New Owner exists in CUCM, skipping creating user`);\n        }\n        // #endregion\n        // #region Update Directory Number Description\n        nim.logInfo(\"Updating Directory Number Description\");\n        throw new ReferenceError('testing error');\n        // TODO: Target Action \n        // #endregion\n        // #region Update Device-To-Line Description\n        nim.logInfo(\"Updating Device-To-Line Description\");\n        // TODO: Target Action\n        // #endregion\n        // #region Update the Phone Owner\n        nim.logInfo(\"Updating Phone Owner\");\n        // TODO: Target Action\n        // #endregion\n        // #region New Owner Devices\n        //TODO: Deduplicate removal logic into separate function\n        //Check for New Owner for Line, Remove Devices\n        nim.logInfo(\"Check if new owner has associated devices\");\n        const newOwnerDevices = yield nim.filterExecute(\"App_Cisco_Script_GetUserAssociatedDevices\", { UserId: NewUserId });\n        if (newOwnerDevices && (newOwnerDevices === null || newOwnerDevices === void 0 ? void 0 : newOwnerDevices.length) > 0) {\n            nim.logInfo(`New Owner has ${newOwnerDevices === null || newOwnerDevices === void 0 ? void 0 : newOwnerDevices.length} Devices`);\n            // Loop over each Devices\n            newOwnerDevices.forEach(function (device) {\n                nim.logInfo(`Device Name - [${device.name}]`);\n                // Skip Physical Phones\n                if (!device.name.startsWith(\"SEP\")) {\n                    nim.logInfo(`Remove Device - [${device.name}]`);\n                    //TODO: Target action remove device\n                }\n                else {\n                    nim.logInfo(`Skipping Device Removal - [${device.name}]`);\n                }\n            });\n        }\n        else {\n            nim.logInfo(`No devices found for new owner`);\n        }\n        // TODO: Target Action\n        // #endregion\n        // #region Update Soft Phone for new user\n        nim.logInfo(\"Updating Soft Phone for new user\");\n        // TODO: Target Action\n        // #endregion\n        // #region Update User's associated devices with all phone names\n        nim.logInfo(\"New Owner Associate devices phone names\");\n        // TODO: Target Action\n        // #endregion\n        // #region Update IPPhone for AD User\n        nim.logInfo(\"Updating [ipPhone] for New Owner\");\n        // TODO: Target Action\n        // #endregion\n        // #region Update telephoneNumber for AD User\n        nim.logInfo(\"Updating [telephoneNumber] for New Owner\");\n        // TODO: Target Action\n        // #endregion\n        // #region Reassign current extension owner\n        nim.logInfo(\"Checking target extension is taken in Unity\");\n        // TODO: If condition, check if extension taken\n        // TODO: True\n        // Retrieve assigned user to extension\n        // TODO: If condition, check if new owner matches current owner\n        // TODO: True\n        // Assign random extension to current assigned user, make sure not taken\n        // Store in lookup table as parked mailbox\n        // Updated Assigned User in AD (ipPhone, telephoneNumber)\n        // False\n        // Do Nothing\n        // False\n        // Do nothing\n        // #endregion\n        // #region Check New Owner in Unity\n        // TODO: If condition, new owner exists in Unity\n        // False\n        // Create Unity User\n        // Add SMTP Address\n        // Add Unified Messaging\n        // True\n        // Update User Extension\n        // Add/Update SMTP Address\n        // Add/Update Unified Messaging\n        // #endregion\n        // #region Update New Owner Call Schedule\n        // TODO: Target Action\n        // #endregion\n        // #region New Owner Transfer Rules\n        // TODO: If Condition, check if User Transfer Rules Enabled\n        // True\n        // Update User Standard Transfer Rule\n        // Update User Closed Transfer Rule\n        // Update User Alternative Transfer Rule\n        // False\n        // Do Nothing\n        // #endregion\n        // #region Check Email Enabled and Send Notification\n        // TODO: If Condition, check settings for email enabled\n        // True\n        // Send Notification\n        // False\n        // Do Nothing\n        // #endregion \n    });\n}\nexports.userTest = userTest;\n","production_ready":true,"message":"","signatures":[{"name":"userTest","input_args":[{"name":"PreviousUserId","type":0},{"name":"NewUserId","type":0}],"output_args":[]}]}